.result
  %p.timeframe
    - case result_scope
    - when :me
      Me,
    - when :managers, :vertical, :reports
      My #{result_scope}
    - when :tags
      #{scope_tags.map { |t| "##{t}" }.join(' ')},
    - when :all
      Enova,
    - else
      ?
    for the week of #{@result.start_date.format_like 'August 4, 2014'}

  .previous-link
    - if @result.previous.present?
      = link_to start_date: @result.previous.to_param do
        = icon 'arrow-left'
    - else
      %span.muted= icon 'arrow-left'

  .next-link
    - if @result.next.present?
      = link_to start_date: @result.next.to_param do
        = icon 'arrow-right'
    - else
      %span.muted= icon 'arrow-right'

  - if @result.empty?
    %section.summary
      %p
        %strong No data!
      %p This is not a thing.
  - elsif @result.incomplete? or (@result.insufficient? and result_scope != :me)
    %section.summary
      - if @result.incomplete?
        %p
          %strong In progress!
        %p Report is #{number_to_percentage (@result.representation*100).floor, precision: 0} complete, with #{@result.completed_sample_count} of #{@result.sample_count} reporting - come back when we hit #{number_to_percentage (Result::MINIMUM_REPRESENTATION*100), precision: 0}.
      - elsif @result.insufficient?
        %p
          %strong Insufficient data!
        %p We only have #{pluralize @result.size, 'report'} for this result set. We need at least #{Result::MINIMUM_SIZE}, to preserve some semblance of anonymity.
      %p 
  - else
    - if render_uncached_result? or cached? [@result, @metric_results]
      - cache [@result, @metric_results] do
        - @metric_results.each do |metric_result|
          - cache(metric_result) do
            %section.result-metric{id: metric_result.meta[:slug]}
              %header
                %h1{title: metric_result.meta[:description]}= metric_result.meta[:name]

              .data
                .bar-chart{title: 'Total ratings, from 1 to 4'}
                  = render partial: 'sparkline', locals: {data: metric_result.rating_counts, mode: :bars, width: 100}

                .rating.value.active{data: {sparkline_key: 'rating'}}
                  - if metric_result.rating.nan?
                    ?
                  - else
                    = metric_result.rating

                %ul.stats
                  %li.delta.value{title: 'Delta: Change from last week', data: {sparkline_key: 'delta'}}
                    - if metric_result.delta == 0
                      = icon 'pause'
                    - elsif metric_result.delta > 0
                      = icon 'arrow-up'
                    - else
                      = icon 'arrow-down'
                    - if metric_result.delta.nan?
                      ?
                    - else
                      = metric_result.delta
                  %li.volatility.value{title: 'Volatility: The standard deviation of ratings for each user between this and last week, averaged across all users', data: {sparkline_key: 'volatility'}}
                    = icon 'bolt'
                    - if metric_result.volatility.nan?
                      ?
                    - else
                      = metric_result.volatility
                  - if metric_result.size > 1
                    %li.representation.value{title: "Response rate: #{metric_result.completed_sample_count} of #{metric_result.sample_count}", data: {sparkline_key: 'representation'}}
                      = icon 'user'
                      = number_to_percentage metric_result.representation*100, precision: 0
                    %li.unity.value{title: 'Unity: A percentage indicating how closely each team\'s ratings fall', data: {sparkline_key: 'unity'}}
                      = icon 'dot-circle-o'
                      - if metric_result.unity.nan?
                        ?
                      - else
                        = number_to_percentage metric_result.unity*100, precision: 0

                .sparklines
                  - [:rating, :delta, :volatility, :representation, :unity].each do |thing|
                    %div{class: "sparkline-wrapper #{thing} #{'active' if thing == :rating}", title: "The last #{metric_result.sparklines[thing].size} weeks of data"}
                      = render partial: 'sparkline', locals: {data: metric_result.sparklines[thing], mode: :lines}

              - if @scope == :me
                - comments = metric_result.comments
              - else
                - comments = metric_result.public_comments
              - if comments.any?
                %ul.comments
                  - comments.each do |comment|
                    %li.comment
                      .content= simple_format comment.body
                      .author{title: comment.user.name}
                        = comment.user.abbreviated_name
                        - if comment.private?
                          (private)
              - else
                %p.comments.none
                  (no comments)

        - cache(@result) do
          %section.result-comments
            %header
              %h1 General Comments
            - if @result.public_comments.any?
              %ul.comments
                - @result.public_comments.each do |comment|
                  %li.comment
                    .content= simple_format comment.body
                    .author{title: comment.user.name}= comment.user.abbreviated_name
            - else
              %p.comments.none
                (no comments)

          %section.summary
            %ul
              - if @result.size > 1
                %li
                  .label Overall response rate:
                  .value= number_to_percentage @result.representation*100, precision: 0
                  .context (#{@result.completed_sample_count} of #{@result.sample_count})
              / %li
              /   .label Best response time:
              /   .value= @result.shortest_time_to_completion
              /   .context

      %section.definitions
        %header
          %h1 Definitions

        %dl
          %dt Rating
          %dd 1 (emphatically bad), 2 (eh, bad), 3 (eh, good), or 4 (emphatically good).

          %dt Unity
          %dd
            %p A percentage indicating how closely each team's ratings fall. All 3's would be 100%, or perfect unity; an equal number of 0's and 4's would be 0%, or no unity.
            %p <code>average(1 - variance(ratings for each team) / variance([1, 4]))</code>

          %dt Volatility
          %dd
            %p The standard deviation of ratings for each user between this and last week, averaged across all users.

    - else
      .waiting= icon 'cog fa-spin'
      :javascript
        $('.content').load(window.location.href, function() { $(document).trigger('contentchange') })

